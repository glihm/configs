import os
import ycm_core

# These are the compilation flags that will be used in case there's no
# compilation database set (by default, one is not set).
flags = [
'-Wall',
'-Wextra',
'-Werror',
'-Wc++98-compat',
'-Wno-long-long',
'-Wno-variadic-macros',
'-fexceptions',
'-DNDEBUG',
'-std=c++11',
'-x',
'c++',
]

SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]

def IsHeaderFile( filename ):
  extension = os.path.splitext( filename )[ 1 ]
  return extension in [ '.h', '.hxx', '.hpp', '.hh' ]

def DirectoryOfThisScript():
  return os.path.dirname( os.path.abspath( __file__ ) )

def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):
  if not working_directory:
    return list( flags )
  new_flags = []
  make_next_absolute = False
  path_flags = [ '-isystem', '-I', '-iquote', '--sysroot=' ]
  for flag in flags:
    new_flag = flag

    if make_next_absolute:
      make_next_absolute = False
      if not flag.startswith( '/' ):
        new_flag = os.path.join( working_directory, flag )

    for path_flag in path_flags:
      if flag == path_flag:
        make_next_absolute = True
        break

      if flag.startswith( path_flag ):
        path = flag[ len( path_flag ): ]
        new_flag = path_flag + os.path.join( working_directory, path )
        break

    if new_flag:
      new_flags.append( new_flag )
  return new_flags

def GetCompilationDatabaseForFile( filename ):
  compilation_database_folder = os.path.abspath( os.path.dirname( filename ) )

  if IsHeaderFile( filename ):
    return None

  while not os.path.exists (compilation_database_folder + "/compile_commands.json"):
    folder = os.path.abspath( os.path.join( compilation_database_folder, os.pardir ) )
    if folder == compilation_database_folder:
      break
    compilation_database_folder = folder

  if os.path.exists( compilation_database_folder + "/compile_commands.json" ):
    return ycm_core.CompilationDatabase( compilation_database_folder )
  return None

def GetCompilationInfoForFile( filename ):
  # The compilation_commands.json file generated by CMake does not have entries
  # for header files. So we do our best by asking the db for flags for a
  # corresponding source file, if any. If one exists, the flags for that file
  # should be good enough.
  database = GetCompilationDatabaseForFile( filename )
  if not database:
    return None

  return database.GetCompilationInfoForFile( filename )


def FlagsForFile( filename, **kwargs ):
  # Bear in mind that compilation_info.compiler_flags_ does NOT return a
  # python list, but a "list-like" StringVec object
  compilation_info = GetCompilationInfoForFile( filename )

  if compilation_info:
    final_flags = MakeRelativePathsInFlagsAbsolute(
      compilation_info.compiler_flags_,
      compilation_info.compiler_working_dir_ )

    flags_to_remove = [ '-Werror', '-m', '-M' ]
    for flag in flags_to_remove:
      final_flags = [x for x in final_flags if not x.startswith(flag)]

  else:
    relative_to = DirectoryOfThisScript()
    final_flags = MakeRelativePathsInFlagsAbsolute( flags, relative_to )


  return {
    'flags': final_flags,
    'do_cache': False
  }
